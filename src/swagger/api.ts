/**
 * @gtm/service.user
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import { interfaces } from 'inversify';
import * as libclient from '@gtm/lib.client';

/* tslint:disable:no-unused-variable */
export class JwtToken {
    /**
    * User's display name 
    */
    'name': string;
    'session': string;
    'user': string;
    /**
    * List of scope or null is all scope (*) 
    */
    'scope': MapOfBoolean;
    /**
    * Valid until 
    */
    'expires': number;
}

export class MapOfBoolean extends null<String, boolean> {
}

export class MessageDetailView {
    'id': string;
    'userId': string;
    'userName': string;
    'toUserId': string;
    'toUserName': string;
    'content': string;
    'delivered': number;
    'created': number;
    'updated': number;
}

export class MessageEntity {
    'userId': string;
    'toUserId': string;
    'content': string;
    'delivered': number;
    'id': any;
    'created': number;
    'updated': number;
    'deleted': number;
}

export class MessageView {
    'userId': string;
    'toUserId': string;
    'content': string;
    'delivered': number;
}

export class MessageViewWithPagination {
    'messages': Array<MessageDetailView>;
    'totalItems': number;
}

export class RoleEntity {
    'name': string;
    'scope': string;
    'id': any;
    'created': number;
    'updated': number;
    'deleted': number;
}

export class RoleView {
    /**
    * role code 
    */
    'code': string;
    /**
    * role scope 
    */
    'scope': string;
}

export class RoleViewWithPagination {
    'roles': Array<RoleEntity>;
    'totalItems': number;
}


export enum MessageApiApiKeys {
}

export class MessageApi extends libclient.ApiClient {
    constructor(basePath?: string, accessToken?: string) {
        super(basePath, accessToken);
    }

    /**
     * Create New Message 
     * @param messageView 
     */
    public createEntity (messageView: MessageView) : Promise<libclient.ApiResponse<MessageEntity>> {

        // verify required parameter 'messageView' is not null or undefined
        if (messageView === null || messageView === undefined) {
            throw new Error('Required parameter messageView was null or undefined when calling createEntity.');
        }
        let queryParameters: any = {};
        let headerParams: any = this.defaultHeaders;
        let isFile = false;
        let formParams: any = {};
        return this.execute<MessageEntity>('POST', '/api/user/v1/Message',
            queryParameters, headerParams, formParams, isFile, false, messageView
        );
    }

    /**
     * Delete Message 
     * @param id 
     */
    public deleteEntity (id: string) : Promise<libclient.ApiResponse<any>> {

        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling deleteEntity.');
        }
        let queryParameters: any = {};
        let headerParams: any = this.defaultHeaders;
        let isFile = false;
        let formParams: any = {};
        return this.execute<any>('DELETE', '/api/user/v1/Message/{id}'.replace('{' + 'id' + '}', String(id)),
            queryParameters, headerParams, formParams, isFile, false, undefined
        );
    }

    /**
     * Get Messages 
     * @param query 
     * @param pageNumber 
     * @param itemCount 
     */
    public getEntities (query?: string, pageNumber?: number, itemCount?: number) : Promise<libclient.ApiResponse<MessageViewWithPagination>> {
        let queryParameters: any = {};
        if (query !== undefined) queryParameters['query'] = query;
        if (pageNumber !== undefined) queryParameters['pageNumber'] = pageNumber;
        if (itemCount !== undefined) queryParameters['itemCount'] = itemCount;
        let headerParams: any = this.defaultHeaders;
        let isFile = false;
        let formParams: any = {};
        return this.execute<MessageViewWithPagination>('GET', '/api/user/v1/Message',
            queryParameters, headerParams, formParams, isFile, false, undefined
        );
    }

    /**
     * Get Message by Id 
     * @param id 
     */
    public getEntity (id: string) : Promise<libclient.ApiResponse<MessageEntity>> {

        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getEntity.');
        }
        let queryParameters: any = {};
        let headerParams: any = this.defaultHeaders;
        let isFile = false;
        let formParams: any = {};
        return this.execute<MessageEntity>('GET', '/api/user/v1/Message/{id}'.replace('{' + 'id' + '}', String(id)),
            queryParameters, headerParams, formParams, isFile, false, undefined
        );
    }

    /**
     * Update Message 
     * @param id 
     * @param messageView 
     */
    public updateEntity (id: string, messageView: MessageView) : Promise<libclient.ApiResponse<MessageEntity>> {

        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling updateEntity.');
        }

        // verify required parameter 'messageView' is not null or undefined
        if (messageView === null || messageView === undefined) {
            throw new Error('Required parameter messageView was null or undefined when calling updateEntity.');
        }
        let queryParameters: any = {};
        let headerParams: any = this.defaultHeaders;
        let isFile = false;
        let formParams: any = {};
        return this.execute<MessageEntity>('PUT', '/api/user/v1/Message/{id}'.replace('{' + 'id' + '}', String(id)),
            queryParameters, headerParams, formParams, isFile, false, messageView
        );
    }
}
export enum RoleApiApiKeys {
}

export class RoleApi extends libclient.ApiClient {
    constructor(basePath?: string, accessToken?: string) {
        super(basePath, accessToken);
    }

    /**
     * Create New Role 
     * @param roleView 
     */
    public createEntity (roleView: RoleView) : Promise<libclient.ApiResponse<RoleEntity>> {

        // verify required parameter 'roleView' is not null or undefined
        if (roleView === null || roleView === undefined) {
            throw new Error('Required parameter roleView was null or undefined when calling createEntity.');
        }
        let queryParameters: any = {};
        let headerParams: any = this.defaultHeaders;
        let isFile = false;
        let formParams: any = {};
        return this.execute<RoleEntity>('POST', '/api/user/v1/role',
            queryParameters, headerParams, formParams, isFile, false, roleView
        );
    }

    /**
     * Delete Role 
     * @param id 
     */
    public deleteEntity (id: string) : Promise<libclient.ApiResponse<any>> {

        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling deleteEntity.');
        }
        let queryParameters: any = {};
        let headerParams: any = this.defaultHeaders;
        let isFile = false;
        let formParams: any = {};
        return this.execute<any>('DELETE', '/api/user/v1/role/{id}'.replace('{' + 'id' + '}', String(id)),
            queryParameters, headerParams, formParams, isFile, false, undefined
        );
    }

    /**
     * Get Roles 
     * @param query 
     * @param pageNumber 
     * @param itemCount 
     */
    public getEntities (query?: string, pageNumber?: number, itemCount?: number) : Promise<libclient.ApiResponse<RoleViewWithPagination>> {
        let queryParameters: any = {};
        if (query !== undefined) queryParameters['query'] = query;
        if (pageNumber !== undefined) queryParameters['pageNumber'] = pageNumber;
        if (itemCount !== undefined) queryParameters['itemCount'] = itemCount;
        let headerParams: any = this.defaultHeaders;
        let isFile = false;
        let formParams: any = {};
        return this.execute<RoleViewWithPagination>('GET', '/api/user/v1/role',
            queryParameters, headerParams, formParams, isFile, false, undefined
        );
    }

    /**
     * Get Role by Id 
     * @param id 
     */
    public getEntity (id: string) : Promise<libclient.ApiResponse<RoleEntity>> {

        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getEntity.');
        }
        let queryParameters: any = {};
        let headerParams: any = this.defaultHeaders;
        let isFile = false;
        let formParams: any = {};
        return this.execute<RoleEntity>('GET', '/api/user/v1/role/{id}'.replace('{' + 'id' + '}', String(id)),
            queryParameters, headerParams, formParams, isFile, false, undefined
        );
    }

    /**
     * Update Role 
     * @param id 
     * @param roleView 
     */
    public updateEntity (id: string, roleView: RoleView) : Promise<libclient.ApiResponse<RoleEntity>> {

        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling updateEntity.');
        }

        // verify required parameter 'roleView' is not null or undefined
        if (roleView === null || roleView === undefined) {
            throw new Error('Required parameter roleView was null or undefined when calling updateEntity.');
        }
        let queryParameters: any = {};
        let headerParams: any = this.defaultHeaders;
        let isFile = false;
        let formParams: any = {};
        return this.execute<RoleEntity>('PUT', '/api/user/v1/role/{id}'.replace('{' + 'id' + '}', String(id)),
            queryParameters, headerParams, formParams, isFile, false, roleView
        );
    }
}
export enum SessionApiApiKeys {
}

export class SessionApi extends libclient.ApiClient {
    constructor(basePath?: string, accessToken?: string) {
        super(basePath, accessToken);
    }

    /**
     * Check current session info 
     */
    public getCurrent () : Promise<libclient.ApiResponse<JwtToken>> {
        let queryParameters: any = {};
        let headerParams: any = this.defaultHeaders;
        let isFile = false;
        let formParams: any = {};
        return this.execute<JwtToken>('GET', '/api/user/v1/session/current',
            queryParameters, headerParams, formParams, isFile, false, undefined
        );
    }
}
export enum SystemApiApiKeys {
}

export class SystemApi extends libclient.ApiClient {
    constructor(basePath?: string, accessToken?: string) {
        super(basePath, accessToken);
    }

    /**
     * Check loggedin status 
     */
    public getLoggedin () : Promise<libclient.ApiResponse<boolean>> {
        let queryParameters: any = {};
        let headerParams: any = this.defaultHeaders;
        let isFile = false;
        let formParams: any = {};
        return this.execute<boolean>('GET', '/api/user/v1/system/loggedin',
            queryParameters, headerParams, formParams, isFile, false, undefined
        );
    }

    /**
     * Get current system version info 
     */
    public getVersion () : Promise<libclient.ApiResponse<string>> {
        let queryParameters: any = {};
        let headerParams: any = this.defaultHeaders;
        let isFile = false;
        let formParams: any = {};
        return this.execute<string>('POST', '/api/user/v1/system/version',
            queryParameters, headerParams, formParams, isFile, false, undefined
        );
    }
}

export function registerIoc(iocContainer: interfaces.Container, basePath: string, token?: string | (() => string)) {
    libclient.registerApiClient(iocContainer, MessageApi, MessageApi, basePath, token);
    libclient.registerApiClient(iocContainer, RoleApi, RoleApi, basePath, token);
    libclient.registerApiClient(iocContainer, SessionApi, SessionApi, basePath, token);
    libclient.registerApiClient(iocContainer, SystemApi, SystemApi, basePath, token);
}
