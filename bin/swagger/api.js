"use strict";
/**
 * @gtm/service.user
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const libclient = require("@gtm/lib.client");
/* tslint:disable:no-unused-variable */
class JwtToken {
}
exports.JwtToken = JwtToken;
class MUserView {
}
exports.MUserView = MUserView;
class MapOfBoolean extends null {
}
exports.MapOfBoolean = MapOfBoolean;
class MessageDetailView {
}
exports.MessageDetailView = MessageDetailView;
class MessageEntity {
}
exports.MessageEntity = MessageEntity;
class MessageView {
}
exports.MessageView = MessageView;
class MessageViewWithPagination {
}
exports.MessageViewWithPagination = MessageViewWithPagination;
/**
* Allows manipulation and formatting of text strings and determination and location of substrings within strings.
*/
class ModelString {
}
exports.ModelString = ModelString;
class RoleDetailView {
}
exports.RoleDetailView = RoleDetailView;
class RoleView {
}
exports.RoleView = RoleView;
class RoleViewWithPagination {
}
exports.RoleViewWithPagination = RoleViewWithPagination;
var MessageApiApiKeys;
(function (MessageApiApiKeys) {
})(MessageApiApiKeys = exports.MessageApiApiKeys || (exports.MessageApiApiKeys = {}));
class MessageApi extends libclient.ApiClient {
    constructor(basePath, accessToken) {
        super(basePath, accessToken);
    }
    /**
     * Create New Message
     * @param messageView
     */
    createEntity(messageView) {
        // verify required parameter 'messageView' is not null or undefined
        if (messageView === null || messageView === undefined) {
            throw new Error('Required parameter messageView was null or undefined when calling createEntity.');
        }
        let queryParameters = {};
        let headerParams = this.defaultHeaders;
        let isFile = false;
        let formParams = {};
        return this.execute('POST', '/api/user/v1/Message', queryParameters, headerParams, formParams, isFile, false, messageView);
    }
    /**
     * Delete Message
     * @param id
     */
    deleteEntity(id) {
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling deleteEntity.');
        }
        let queryParameters = {};
        let headerParams = this.defaultHeaders;
        let isFile = false;
        let formParams = {};
        return this.execute('DELETE', '/api/user/v1/Message/{id}'.replace('{' + 'id' + '}', String(id)), queryParameters, headerParams, formParams, isFile, false, undefined);
    }
    /**
     * Get Messages
     * @param query
     * @param pageNumber
     * @param itemCount
     */
    getEntities(query, pageNumber, itemCount) {
        let queryParameters = {};
        if (query !== undefined)
            queryParameters['query'] = query;
        if (pageNumber !== undefined)
            queryParameters['pageNumber'] = pageNumber;
        if (itemCount !== undefined)
            queryParameters['itemCount'] = itemCount;
        let headerParams = this.defaultHeaders;
        let isFile = false;
        let formParams = {};
        return this.execute('GET', '/api/user/v1/Message', queryParameters, headerParams, formParams, isFile, false, undefined);
    }
    /**
     * Get Message by Id
     * @param id
     */
    getEntity(id) {
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getEntity.');
        }
        let queryParameters = {};
        let headerParams = this.defaultHeaders;
        let isFile = false;
        let formParams = {};
        return this.execute('GET', '/api/user/v1/Message/{id}'.replace('{' + 'id' + '}', String(id)), queryParameters, headerParams, formParams, isFile, false, undefined);
    }
    /**
     * Update Message
     * @param id
     * @param messageView
     */
    updateEntity(id, messageView) {
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling updateEntity.');
        }
        // verify required parameter 'messageView' is not null or undefined
        if (messageView === null || messageView === undefined) {
            throw new Error('Required parameter messageView was null or undefined when calling updateEntity.');
        }
        let queryParameters = {};
        let headerParams = this.defaultHeaders;
        let isFile = false;
        let formParams = {};
        return this.execute('PUT', '/api/user/v1/Message/{id}'.replace('{' + 'id' + '}', String(id)), queryParameters, headerParams, formParams, isFile, false, messageView);
    }
}
exports.MessageApi = MessageApi;
var RoleApiApiKeys;
(function (RoleApiApiKeys) {
})(RoleApiApiKeys = exports.RoleApiApiKeys || (exports.RoleApiApiKeys = {}));
class RoleApi extends libclient.ApiClient {
    constructor(basePath, accessToken) {
        super(basePath, accessToken);
    }
    /**
     * Create New Role
     * @param roleView
     */
    createEntity(roleView) {
        let queryParameters = {};
        let headerParams = this.defaultHeaders;
        let isFile = false;
        let formParams = {};
        return this.execute('POST', '/api/user/v1/role', queryParameters, headerParams, formParams, isFile, false, roleView);
    }
    /**
     * Delete Role
     * @param id
     */
    deleteEntity(id) {
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling deleteEntity.');
        }
        let queryParameters = {};
        let headerParams = this.defaultHeaders;
        let isFile = false;
        let formParams = {};
        return this.execute('DELETE', '/api/user/v1/role/{id}'.replace('{' + 'id' + '}', String(id)), queryParameters, headerParams, formParams, isFile, false, undefined);
    }
    /**
     * Get Roles
     * @param query
     * @param pageNumber
     * @param itemCount
     */
    getEntities(query, pageNumber, itemCount) {
        let queryParameters = {};
        if (query !== undefined)
            queryParameters['query'] = query;
        if (pageNumber !== undefined)
            queryParameters['pageNumber'] = pageNumber;
        if (itemCount !== undefined)
            queryParameters['itemCount'] = itemCount;
        let headerParams = this.defaultHeaders;
        let isFile = false;
        let formParams = {};
        return this.execute('GET', '/api/user/v1/role', queryParameters, headerParams, formParams, isFile, false, undefined);
    }
    /**
     * Get Role by Id
     * @param id
     */
    getEntity(id) {
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getEntity.');
        }
        let queryParameters = {};
        let headerParams = this.defaultHeaders;
        let isFile = false;
        let formParams = {};
        return this.execute('GET', '/api/user/v1/role/{id}'.replace('{' + 'id' + '}', String(id)), queryParameters, headerParams, formParams, isFile, false, undefined);
    }
    /**
     * Update Role
     * @param id
     * @param roleView
     */
    updateEntity(id, roleView) {
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling updateEntity.');
        }
        let queryParameters = {};
        let headerParams = this.defaultHeaders;
        let isFile = false;
        let formParams = {};
        return this.execute('PUT', '/api/user/v1/role/{id}'.replace('{' + 'id' + '}', String(id)), queryParameters, headerParams, formParams, isFile, false, roleView);
    }
}
exports.RoleApi = RoleApi;
var SessionApiApiKeys;
(function (SessionApiApiKeys) {
})(SessionApiApiKeys = exports.SessionApiApiKeys || (exports.SessionApiApiKeys = {}));
class SessionApi extends libclient.ApiClient {
    constructor(basePath, accessToken) {
        super(basePath, accessToken);
    }
    /**
     * Check current session info
     */
    getCurrent() {
        let queryParameters = {};
        let headerParams = this.defaultHeaders;
        let isFile = false;
        let formParams = {};
        return this.execute('GET', '/api/user/v1/session/current', queryParameters, headerParams, formParams, isFile, false, undefined);
    }
}
exports.SessionApi = SessionApi;
var SystemApiApiKeys;
(function (SystemApiApiKeys) {
})(SystemApiApiKeys = exports.SystemApiApiKeys || (exports.SystemApiApiKeys = {}));
class SystemApi extends libclient.ApiClient {
    constructor(basePath, accessToken) {
        super(basePath, accessToken);
    }
    /**
     * Check loggedin status
     */
    getLoggedin() {
        let queryParameters = {};
        let headerParams = this.defaultHeaders;
        let isFile = false;
        let formParams = {};
        return this.execute('GET', '/api/user/v1/system/loggedin', queryParameters, headerParams, formParams, isFile, false, undefined);
    }
    /**
     * Get current system version info
     */
    getVersion() {
        let queryParameters = {};
        let headerParams = this.defaultHeaders;
        let isFile = false;
        let formParams = {};
        return this.execute('POST', '/api/user/v1/system/version', queryParameters, headerParams, formParams, isFile, false, undefined);
    }
}
exports.SystemApi = SystemApi;
var UserApiApiKeys;
(function (UserApiApiKeys) {
})(UserApiApiKeys = exports.UserApiApiKeys || (exports.UserApiApiKeys = {}));
class UserApi extends libclient.ApiClient {
    constructor(basePath, accessToken) {
        super(basePath, accessToken);
    }
    /**
     * Get user by Id
     * @param id
     */
    getEntity(id) {
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getEntity.');
        }
        let queryParameters = {};
        let headerParams = this.defaultHeaders;
        let isFile = false;
        let formParams = {};
        return this.execute('GET', '/api/user/v1/user/{id}'.replace('{' + 'id' + '}', String(id)), queryParameters, headerParams, formParams, isFile, false, undefined);
    }
}
exports.UserApi = UserApi;
function registerIoc(iocContainer, basePath, token) {
    libclient.registerApiClient(iocContainer, MessageApi, MessageApi, basePath, token);
    libclient.registerApiClient(iocContainer, RoleApi, RoleApi, basePath, token);
    libclient.registerApiClient(iocContainer, SessionApi, SessionApi, basePath, token);
    libclient.registerApiClient(iocContainer, SystemApi, SystemApi, basePath, token);
    libclient.registerApiClient(iocContainer, UserApi, UserApi, basePath, token);
}
exports.registerIoc = registerIoc;
//# sourceMappingURL=api.js.map